Data <- read.csv('http://jonsmitchell.com/data/beren.csv', stringsAsFactors = F)
View(Data)
Feeds <- which(beren3$event == "bottle")
Feeds <- which(beren2$event == "bottle")
Feeds <- which(beren$event == "bottle")
avgMilk <- mean(beren3$value == "bottle")
setwd('C://Desktop//Evolution//Tasks//Task02')
Data <- read.csv('http://jonsmitchell.com/data/beren.csv', stringsAsFactors = F)
write.csv(Data, 'rawdata.csv', quote=F)
View(Data)
length(Data)
nrow(Data)
ncol(Data)
colnames(Data)
head(Data)
Data[1,]
Data[2,]
Data[1:3,]
Data[1:3, 4]
Data[1:5, 1:3]
Data[257, ]
Feeds <- which(Data[,9] == 'bottle')
berenMilk <- Data[Feeds,]
head(berenMilk)
Feeds <- which(Data[,'event'] == 'bottle')
Feeds <- which(Data$event == 'bottle')
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse='-'))
dateID <- sapply(dayID, as.Date, format = "%Y-%n-%d", origin = "2019-04-18")
Data$age <- dateID - dateID[which(Data$event == 'birth')]
head(Data)
beren2 <- Data
beren3 <- beren2[order(beren2$age) ,]
head(beren2)
head(beren3)
Feeds <- which(beren3$event == "bottle")
avgMilk <- mean(beren3$value[Feeds])
avgFeed <- tapply(beren3$value[Feeds], beren$age[Feeds], mean)
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
beren3 <- beren2[order(beren2$age),]
head(beren2)
head(beren3)
Feeds <- which(beren3$event == "bottle")
avgMilk <- mean(beren3$value[Feeds])
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
source("http://jonsmitchell.com/code/fxn05.R")
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), type = "1", xlab="generation", ylab="allele freq.", lwd=2)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), type = "l", xlab="generation", ylab="allele freq.", lwd=2)
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd = 2, bty="n")
plotFit(nruns = 1-10, n = 50, ngens = 100, init_p = 0.5, h = 1, s = 0)
plotFit(nruns = 10, n = 50, ngens = 100, init_p = 0.5, h = 1, s = 0)
Expectation <- c(10, 10, 10, 10)
Observed <- c(15, 15, 5, 5)
Chisq <- sum(((Expectation - Observed) ^ 2) / Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "="~.(Chisq)), legend.text=c("expected", "observed"))
Observed <- c(5, 0, 0, 35)
Chisq <- sum(((Expectation - Observed) ^ 2) / Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "="~.(Chisq)), legend.text=c("expected", "observed"))
Observed <- c(2, 3, 10, 30)
Chisq <- sum(((Expectation - Observed) ^ 2) / Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "="~.(Chisq)), legend.text=c("expected", "observed"))
results <- read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors = F)
counts <- results[,c("yellow", "red", "green", "blue", "black", "tan")]
backgrounds <- c("White", "Red", "Yellow", "Green", "Blue", "Black")
backgroundCol <- c("white","#d53e4f","#fee08b","#abdda4","#3288bd","black")
calcChi(counts[1.])
Chiqs <- apply(counts, 1, calcChi)
plotChis(counts)
plotChis(counts)
plotChiqs(counts)
plotChisqs(counts)
Chisqs <- apply(counts, 1, calcChi)
plotChis(counts)
Avg <- mean(Chisqs)
backgroundAvgs <- tapply(Chisqs, results[,3], mean)
propSig <- length(which(Chiqs > 11.70))/length(Chisqs)
percSig <- round(100 * propSig)
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex.axis=1)
plot(1, 1, xlim=c(0, 400), ylim=c(1, 8.5), xlab="", ylab="", type="n", yaxt="n")
axis(2, at = 1:length(backgrounds), labels = backgrounds)
mtext(side=1, expression(chi^2), cex=1.75, line=2.5)
counter <- 1
for(i in backgrounds)
Data <- Chisqs[which(results[,3] ==i)]
addHist(Y=counter, Dat=Data, Color=backgroundCol[counter])
counter <- counter + 1
}
abline(v = 11.70, lty=2, lwd =2, col='black')
Simulation <- sinDraws(10000)
Simulation <- simDraws(10000)
addHist(Y=7, Dat=Simulation, Color="lightgray")
mtext(side=2, at=7, line=0, "simulated")
abline(v = 11.70, lty=2, lwd=2)
Fit <- c(1, 1, 1, 1, 1, 1)
names(Fit) <- 1:6
Simulation2 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation2, Color=rgb(0, 0, 0, 0.25))
Fit <- c(0.5, 0.6, 0.7, 1, 1, 1)
names(Fit) <- 1:6
Simulation3 <- simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation3, Color=rgb(0, 0, 0, 0.25))
Fit <- c(0.5, 0.6, 0.7, 1, 1, 1)
names(Fit) <- 1:6
Simulation4 <- simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation4, Color=rgb(0, 0, 0, 0.25))
Fit <- c(0.1, 0.2, 0.3, 0.4, 0.5, 1)
names(Fit) <- 1:6
Simulation5 <- simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation5, Color=rgb(0, 0, 0, 0.25))
Fit <- c(0.1, 0.1, 0.1, 0.1, 0.1, 1)
names(Fit) <- 1:6
Simulation6 <- simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation6, Color=rgb(0, 0, 0, 0.25))
mtext(side=2, at=8, line=0, "sel.sim.")
Simulation6 <- c(Simulation2, Simulation3, Simulation4, Simulation5, Simulation6)
addHist(Y=8, Dat=Simulation7, Color=rgb(0, 0, 1, 0.25))
Simulation7 <- c(Simulation2, Simulation3, Simulation4, Simulation5, Simulation6)
addHist(Y=8, Dat=Simulation7, Color=rgb(0, 0, 1, 0.25))
n.sims <- 1000
n.color <- rbinom(n.sims, 1000, 0.25)
hist(n.color)
if("offspring" different color than "parent")
if(offspring different color than parent)
if(offspring different color than parent){}
simPop(Popsize=100, nGenerations=100, h=1, s=0, initial_p=0.5, mu = 0, twoway = TRUE, w = NULL)
color <- c("offspring", "parent") size=100 replace=TRUE prop=c(1/2, 1/2)
color <- c("offspring", "parent"), size=100, replace=TRUE, prop=c(1/2, 1/2)
color <- c(offspring, parent), size=100, replace=TRUE, prop=c(1/2, 1/2)
color <- c(offspring parent), size=100, replace=TRUE, prop=c(1/2, 1/2)
color <- c(offspring, parent) size=100, replace=TRUE, prop=c(1/2, 1/2)
color <- c(offspring, parent) Popsize=100, replace=TRUE, prop=c(1/2, 1/2)
for(i in 1:100)
for(i in 1:100){
if(color[i]=="")
Observed <- c(15, 15, 5, 5)
Observed <- c(15, 15, 5, 5)
View(makeGamete)
Expectation <- c(10, 10, 10, 10)
Expectation <- c(10, 10, 10, 10)
Observed <- c(15, 15, 5, 5
Expectation <- c(10, 10, 10, 10)
Expectation <- c(10, 10, 10, 10)
Observed <- c(40, 40, 40, 40)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "="~.(Chisq)), legend.text=c("expected", "observed"))
Expectation <- c(10, 10, 10, 10)
Chisq <- sum(((Expectation - Observed) ^ 2) / Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "="~.(Chisq)), legend.text=c("expected", "observed"))
Observed <- c(40, 40, 40, 40)
Chisq <- sum(((Expectation - Observed) ^ 2) / Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "="~.(Chisq)), legend.text=c("expected", "observed"))
Avg <- mean(Chisqs)
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), type = "l", xlab="generation", ylab="allele freq.", lwd=2)
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd = 2, bty="n")
plotFit(nruns = 10, n = 50, ngens = 100, init_p = 0.5, h = 1, s = 0)
Expectation <- c(10, 10, 10, 10)
Observed <- c(15, 15, 5, 5)
Chisq <- sum(((Expectation - Observed) ^ 2) / Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "="~.(Chisq)), legend.text=c("expected", "observed"))
Observed <- c(5, 0, 0, 35)
Chisq <- sum(((Expectation - Observed) ^ 2) / Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "="~.(Chisq)), legend.text=c("expected", "observed"))
Observed <- c(2, 3, 10, 30)
Chisq <- sum(((Expectation - Observed) ^ 2) / Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "="~.(Chisq)), legend.text=c("expected", "observed"))
results <- read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors = F)
counts <- results[,c("yellow", "red", "green", "blue", "black", "tan")]
backgrounds <- c("White", "Red", "Yellow", "Green", "Blue", "Black")
backgroundCol <- c("white","#d53e4f","#fee08b","#abdda4","#3288bd","black")
calcChi(counts[1.])
Chisqs <- apply(counts, 1, calcChi)
plotChis(counts)
Avg <- mean(Chisqs)
backgroundAvgs <- tapply(Chisqs, results[,3], mean)
propSig <- length(which(Chiqs > 11.70))/length(Chisqs)
percSig <- round(100 * propSig)
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex.axis=1)
plot(1, 1, xlim=c(0, 400), ylim=c(1, 8.5), xlab="", ylab="", type="n", yaxt="n")
axis(2, at = 1:length(backgrounds), labels = backgrounds)
backgroundAvgs <- tapply(Chisqs, results[,3], mean)
percSig <- round(100 * propSig)
for(i in backgrounds)
Data <- Chisqs[which(results[,3] ==i)]
addHist(Y=counter, Dat=Data, Color=backgroundCol[counter])
counter <- counter + 1
abline(v = 11.70, lty=2, lwd =2, col='black')
addHist(Y=7, Dat=Simulation, Color="lightgray")
mtext(side=2, at=7, line=0, "simulated")
abline(v = 11.70, lty=2, lwd=2)
Fit <- c(1, 1, 1, 1, 1, 1)
names(Fit) <- 1:6
Simulation2 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation2, Color=rgb(0, 0, 0, 0.25))
addHist(Y=8, Dat=Simulation2, Color=rgb(0, 0, 0, 0.25))
Fit <- c(1, 1, 1, 1, 1, 1)
names(Fit) <- 1:6
Simulation2 <- simDraws(1e4, w = Fit)
addHist(Y=8, Dat=Simulation2, Color=rgb(0, 0, 0, 0.25))
learnPopGen:
coalescent.plot()
learnPopGen
library(learnPopGen)
install.packages("learnPopGen")
install.packages("learnPopGen")
install.packages("learnPopGen")
install.packages("learnPopGen")
library(learnPopGen)
coalescent.plot()
install.packages("coala")
library(coala)
install.Rtools(check = TRUE, check_r_update = TRUE, GUI = TRUE, ...)
install.Rtools()
install.packages("learnPopGen")
install.packages("learnPopGen")
install.packages("learnPopGen")
library(learnPopGen)
coalescent.plot()
install.packages("coala")
library(coala)
library(learncoala)
install.packages("phytools")
install.packages("phytools")
library(phytools)
library(ape)
model <- coal_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2)
model <- coal_model(sample_size = 5, loci_number = 10, loci_length =
500, ploidy = 2) +
feat_mutation(10) +
feat_recombination(10) +
sumstat_trees() +
sumstat_nucleotide_div()
install.packages("rehh", dep=T)
install.packages("assertthat", dep=T)
install.packages("RcppArmadillo", dep=T)
install.packages("https://cran.r-project.org/src/contrib/Archive/scrm/scrm_1.7.3-1.tar.gz", repos=NULL, type="source")
install.packages("learnPopGen")
library(learnPopGen)
coalescent.plot()
install.packages("rehh", dep=T)
install.packages("assertthat", dep=T)
install.packages("RcppArmadillo", dep=T)
install.packages("https://cran.r-project.org/src/contrib/Archive/scrm/scrm_1.7.3-1.tar.gz", repos=NULL, type="source")
install.packages("https://cran.r-project.org/src/contrib/Archive/coala/coala_0.6.0.tar.gz", repos=NULL, type="source")
model <- coal_model(sample_size = 5, loci_number = 10, loci_length =
500, ploidy = 2) +
feat_mutation(10) +
sumstat_trees() +
sumstat_nucleotide_div()
model <- coal_model(sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) + feat_mutation(10) + sumstat_trees() + sumstat_nucleotide_div()
stats <- simulate(model, nsim = 1)
library(coala)
model <- coal_model(sample_size = 5, loci_number = 10, loci_length =
500, ploidy = 2) +
feat_mutation(10) +
sumstat_trees() +
sumstat_nucleotide_div()
stats <- simulate(model, nsim = 1)
Diversity <- stats$pi
Diversity <- stats$pi
library(coala)
model <- coal_model(sample_size = 5, loci_number = 10, loci_length =
500, ploidy = 2) +
feat_mutation(10) +
sumstat_trees() +
sumstat_nucleotide_div()
stats <- simulate(model, nsim = 1)
Diversity <- stats$pi
Nloci <- length(stats$trees)
t1 <- read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
tl <- read.tree(text=stats$trees[[1]][1])
plot(tl)
axisPhylo()
tl <- read.tree(text=stats$trees[[l]][l])
plot(tl)
axisPhylo()
library(read.tree)
Agel <- max(nodeHeights(t1))
t2 <- read.tree(text=stats$trees[[2]][1])
read.tree(file = "", text = NULL, tree.names = NULL, skip = 0, comment.char = "", keep.multi = FALSE, ...)
install.packages("ape")
install.packages("ape")
library(ape)
Nloci <- length(stats$trees)
t1 <- read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
Agel <- max(nodeHeights(t1))
t2 <- read.tree(text=stats$trees[[2]][1])
plot(t2)
axisPhylo()
par(mfrow=c(1,2))
plot(t1)
plot(t2)
axisphylo()
compare.chronograms(t1, t2)
t1_1 <- read.tree(text=stats$trees[[1]][1])
t1_2 <- read.tree(text=stats$trees[[1]][2])
compare.chronograms(t1_, t1_2)
install.packages("learnPopGen")
library(learnPopGen)
coalescent.plot()
install.packages("rehh", dep=T)
install.packages("assertthat", dep=T)
install.packages("RcppArmadillo", dep=T)
install.packages("https://cran.r-project.org/src/contrib/Archive/scrm/scrm_1.7.3-1.tar.gz", repos=NULL, type="source")
for(locus in 1:Nloci) {
ntrees <- length(stats$trees[[locus]])
for(n in 1:ntrees){
if(locus ==1 && n == 1){
outPhy <- read.tree(text=stats$trees[[locus]][n])
}
else {
outPhy <- ape:::c.phylo(outPhy, read.tree(text=stats$trees[[locus]]))
outPhy <- ape:::c.phylo(outPhy, read.tree(text=stats$trees[[locus
]][n]))
}
}
}
par(mfrow=c(1,1))
densityTree(outPhy)
model3 <- coal_model(10, 50)+
feat_mutation(par_prior("theta", sample.int(100, 1)))+
sunstat_nucleotide_div()
stats <- simulate(model3, nsim = 40)
mean_pi <- sapply(stats, function(x)mean(x$pi))
theta <- sapply(stats, function(x)x$pars[["theta"]])
model <- coal_model(sample_size = 5, loci_number = 10, loci_length =
500, ploidy = 2) +
recombination_rate(10) +
sumstat_trees() +
sumstat_nucleotide_div()
stats <- simulate(model, nsim = 1)
mean_pi <- sapply(stats, function(x)mean(x$pi))
theta <- sapply(stats, function(x)x$pars[["theta"]])
compare.chronograms(mean_pi, theta)
install.packages("learnPopGen")
library(learnPopGen)
coalescent.plot()
Nloci <- length(stats$trees)
install.packages("ape")
library(ape)
t1 <- read.tree(text=stats$trees[[1]][1])
plot(t1)
install.packages("ape")
Agel <- max(nodeHeights(t1))
t2 <- read.tree(text=stats$trees[[2]][1])
plot(t2)
axisPhylo()
